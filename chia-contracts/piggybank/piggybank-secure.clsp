
 (mod
    (
        my_amount
        new_amount 
        my_puzzle_hash 
     )

    (include condition_codes.clib) 
    (defconstant TARGET_AMOUNT 500)
    (defconstant CASH_OUT_PUZZLE_HASH 0xcafef00d)

    (defun-inline cash_out(CASH_OUT_PUZZLE_HASH, my_amount new_amount my_puzzle_hash)
        (list 
            (list CREATE_COIN CASH_OUT_PUZZLE_HASH new_amount)
            (list CREATE_COIN my_puzzle_hash 0)
            (list ASSERT_MY_AMOUNT my_amount) ;assert my_amount is unchanged
            (list ASSERT_MY_PUZZLEHASH my_puzzle_hash) ;assert my_puzzle_hash is unchanged
            (list CREATE_COIN_ANNOUNCEMENT new_amount) ;assert new_amount is unchanged. 
            ;this doesn't add security per se, but it DOES allow this amount to be asserted from other spends.
            ;when we're spending our piggybank coin, we're not only spending the coin "up to" a value. I.e. if someone spends the coin and dontates 100
            ;my_amount is 300 and new_amount is 400, another coin (the one being used to fund the donation) goes down, say from 200 to 100.  
            ;by asserting this in the other coin, we ensure miners can't tamper with it.
        )
    )

    (defun-inline recreate_self(my_amount, new_amount my_puzzle_hash)
        (list
            (list CREATE_COIN my_puzzle_hash new_amount )
            (list ASSERT_MY_AMOUNT my_amount) ;assert my_amount is unchanged
            (list ASSERT_MY_PUZZLEHASH my_puzzle_hash) ;assert my_puzzle_hash is unchanged
            (list CREATE_COIN_ANNOUNCEMENT new_amount)
        )
    )


     (if (> new_amount my_amount)
        (if(> new_amount TARGET_AMOUNT) 
            (cash_out CASH_OUT_PUZZLE_HASH, my_amount new_amount my_puzzle_hash)
            (recreate_self my_amount new_amount my_puzzle_hash)
        )
        (x)
     ) 
 )